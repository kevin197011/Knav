---
alwaysApply: true
---
# 📚 Cursor AI 开发规范合集

> 现代全栈开发、云原生、DevOps 的综合最佳实践规范

---

## 📋 规范文件索引

### 📄 [00-mit-rules.mdc](mdc:00-mit-rules.mdc)
**MIT License 规范与使用说明**
- MIT 协议原文
- 代码文件头部声明模板
- 适用范围与注意事项

### 🚀 [01-devops-rules.mdc](mdc:01-devops-rules.mdc)
**DevOps 开发规范**
- 通用开发规则
- Infrastructure as Code (IaC)
- 容器化和编排
- CI/CD 流水线
- 监控和日志
- 安全规则
- 测试规则
- 文档规范

### ☁️ [02-cloud-native-rules.mdc](mdc:02-cloud-native-rules.mdc)
**云原生开发规范**
- 云原生架构原则
- 微服务设计模式
- 服务网格架构 (Istio)
- 云原生存储和数据管理
- 云原生部署策略
- 可观测性和监控
- 云原生安全
- 云原生最佳实践

### 💎 [03-ruby-rules.mdc](mdc:03-ruby-rules.mdc)
**Ruby 开发规范**
- Ruby DevOps 开发原则
- Ruby Gem 开发规范
- Ruby on Rails 开发规范
- Ruby 工具类和日志规范
- Ruby 测试规范 (RSpec)

### 🐍 [04-python-rules.mdc](mdc:04-python-rules.mdc)
**Python 开发规范**
- Python 开发原则
- FastAPI 开发规范
- Python 工具类和日志规范
- Python 测试规范 (pytest)

### 🟨 [05-javascript-typescript-rules.mdc](mdc:05-javascript-typescript-rules.mdc)
**JavaScript/TypeScript 开发规范**
- JavaScript/TypeScript 开发原则
- 前端规则 (React + TypeScript)
- 后端规则 (Node.js + Express)
- JavaScript/TypeScript 工具类和日志规范
- JavaScript/TypeScript 测试规范 (Jest)

### 🐹 [06-go-rules.mdc](mdc:06-go-rules.mdc)
**Go 开发规范**
- Go 开发原则
- 微服务架构
- Go 工具类和日志规范
- Go 测试规范

### ☕ [07-java-rules.mdc](mdc:07-java-rules.mdc)
**Java 开发规范**
- Java 开发原则
- Spring Boot 开发规范
- Java 工具类和日志规范
- Java 测试规范 (JUnit 5)

### 🎨 [08-frontend-rules.mdc](mdc:08-frontend-rules.mdc)
**前端开发规范**
- Tailwind CSS 样式规范
- Font Awesome 图标库集成
- 核心UI组件库设计
- 响应式设计和布局
- 前端测试和性能优化

### 📖 [09-docs-rules.mdc](mdc:09-docs-rules.mdc)
**通用文档规范**
- 文档结构与命名
- README 编写规范
- API/注释/自动化文档
- 版本管理与变更日志
- 多语言与可访问性
- 开源合规与版权
- 自动化与持续集成
- 最佳实践与架构图（Mermaid）

---

## 🎯 核心原则

### 通用开发理念
- 遵循简洁、可读、可维护的代码原则
- 优先考虑安全性、性能和用户体验
- 采用基础设施即代码(IaC)方法
- 实施持续集成/持续部署(CI/CD)最佳实践
- 编写全面的测试和文档

### 现代化开发实践
- 拥抱AI辅助开发，但保持人工审查
- 实施自动化优先策略
- 采用无服务器优先架构
- 实施API优先设计
- 采用事件驱动架构

### 团队协作规范
- 交互都采用中文完成
- 注释一律采用英文完成
- 前端样式一律采用 Tailwind CSS 完成
- 图标统一使用 Font Awesome
- 任何的修改都要确保之前的功能是正常的
- 代码中不允许有任何的 console.log 或 print 语句

---

## 🔧 跨语言工具类和日志全局规范

### 通用原则
- 所有工具类必须有完整的文档注释
- 所有公共方法必须有参数和返回值说明
- 必须包含使用示例
- 错误处理必须统一且明确
- 必须有完整的单元测试覆盖

### 统一日志格式
所有语言的日志都应该遵循以下结构化格式：

```json
{
  "timestamp": "2024-12-31T10:00:00Z",
  "level": "INFO",
  "service": "service-name",
  "message": "Log message",
  "trace_id": "abc123",
  "context": {
    "user_id": "12345",
    "request_id": "req-456"
  }
}
```

### 统一工具类命名规范

| 语言 | 工具类命名 | 示例 |
|------|-----------|------|
| Ruby | `XxxUtil` / `XxxHelper` | `LogUtil`, `HttpHelper` |
| Python | `XxxManager` / `XxxClient` | `LogManager`, `HttpClient` |
| JavaScript/TypeScript | `XxxService` / `XxxClient` | `LogService`, `HttpClient` |
| Go | `XxxService` / `XxxClient` | `LogService`, `HttpClient` |
| Java | `XxxUtil` / `XxxService` | `LogUtil`, `HttpClient` |

---

## 📦 项目结构模板

### 通用项目结构
```
project/
├── .github/
│   └── workflows/           # CI/CD workflows
├── docs/                   # 项目文档
├── scripts/               # 构建和部署脚本
├── tests/                 # 测试文件
├── docker/               # Docker 相关文件
├── k8s/                  # Kubernetes 配置
├── terraform/            # 基础设施代码
├── .env.example          # 环境变量示例
├── .gitignore           # Git 忽略文件
├── README.md            # 项目说明
└── README.zh-CN.md      # 中文项目说明
```

### 语言特定结构

#### Ruby 项目
```
├── lib/                  # 核心代码
├── spec/                # RSpec 测试
├── Gemfile              # 依赖管理
├── Rakefile             # 任务定义
└── .rubocop.yml         # 代码规范配置
```

#### Python 项目
```
├── src/                 # 源代码
├── tests/              # pytest 测试
├── requirements.txt    # 依赖管理
├── pyproject.toml      # 项目配置
└── .pylintrc          # 代码规范配置
```

#### JavaScript/TypeScript 项目
```
├── src/                # 源代码
├── __tests__/         # Jest 测试
├── package.json       # 依赖管理
├── tsconfig.json      # TypeScript 配置
└── .eslintrc.js      # 代码规范配置
```

#### Go 项目
```
├── cmd/               # 应用入口
├── internal/          # 内部包
├── pkg/              # 公共包
├── go.mod            # 模块定义
├── go.sum            # 依赖锁定
└── Makefile          # 构建任务
```

#### Java 项目
```
├── src/main/java/     # 源代码
├── src/test/java/     # 测试代码
├── src/main/resources/ # 资源文件
├── pom.xml            # Maven 依赖管理
├── build.gradle       # Gradle 依赖管理
└── Dockerfile         # 容器化配置
```

---

## 🚀 快速开始

1. **选择对应的语言规范**：根据你的项目技术栈，选择相应的规范文件
2. **设置开发环境**：按照规范配置代码格式化工具和 linter
3. **创建项目结构**：按照推荐的项目结构组织代码
4. **实施工具类规范**：使用统一的工具类和日志格式
5. **编写测试**：按照测试规范编写单元测试和集成测试
6. **设置 CI/CD**：按照 DevOps 规范设置自动化流水线

---

## 🤝 贡献指南

1. 提交 Issue 或 PR 时请遵循相应的模板
2. 所有代码修改必须通过代码审查
3. 确保所有测试通过
4. 更新相关文档

---

## 📄 许可证

本规范遵循 MIT 许可证。详情请参阅 [LICENSE](mdc:../../LICENSE) 文件。