---
alwaysApply: true
---
## üöÄ Spring Boot ÂºÄÂèëËßÑËåÉ

### Â∫îÁî®Á®ãÂ∫èÂÖ•Âè£
```java
// Application.java
package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@SpringBootApplication
@EnableAsync
@EnableTransactionManagement
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
```

### ÊéßÂà∂Âô®Â±Ç
```java
// controller/UserController.java
package com.example.controller;

import com.example.dto.CreateUserRequest;
import com.example.dto.UserResponse;
import com.example.service.UserService;
import com.example.util.ApiResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Min;

@RestController
@RequestMapping("/api/v1/users")
@Validated
public class UserController {

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping
    public ResponseEntity<ApiResponse<UserResponse>> createUser(
            @Valid @RequestBody CreateUserRequest request) {

        UserResponse user = userService.createUser(request);
        ApiResponse<UserResponse> response = ApiResponse.success(user);
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<UserResponse>> getUser(
            @PathVariable @Min(1) Long id) {

        UserResponse user = userService.getUserById(id);
        ApiResponse<UserResponse> response = ApiResponse.success(user);
        return ResponseEntity.ok(response);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteUser(@PathVariable @Min(1) Long id) {
        userService.deleteUser(id);
        ApiResponse<Void> response = ApiResponse.success(null);
        return ResponseEntity.ok(response);
    }
}
```

---

## üîß Java Â∑•ÂÖ∑Á±ªÂíåÊó•ÂøóËßÑËåÉ

### Áªü‰∏ÄÊó•ÂøóÂ∑•ÂÖ∑Á±ª
```java
// util/LogUtil.java
package com.example.util;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.MDC;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class LogUtil {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static final DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;

    public static void setTraceId(String traceId) {
        MDC.put("traceId", traceId);
    }

    public static void setTraceId() {
        setTraceId(UUID.randomUUID().toString().substring(0, 8));
    }

    public static String getTraceId() {
        return MDC.get("traceId");
    }

    public static void clearTraceId() {
        MDC.remove("traceId");
    }

    public static void info(Logger logger, String message, Object... context) {
        log(logger, "INFO", message, null, context);
    }

    public static void error(Logger logger, String message, Throwable throwable, Object... context) {
        log(logger, "ERROR", message, throwable, context);
    }

    public static void warn(Logger logger, String message, Object... context) {
        log(logger, "WARN", message, null, context);
    }

    public static void debug(Logger logger, String message, Object... context) {
        log(logger, "DEBUG", message, null, context);
    }

    private static void log(Logger logger, String level, String message, Throwable throwable, Object... context) {
        try {
            Map<String, Object> logData = new HashMap<>();
            logData.put("timestamp", LocalDateTime.now().format(formatter));
            logData.put("level", level);
            logData.put("service", "java-service");
            logData.put("message", message);

            String traceId = getTraceId();
            if (traceId != null) {
                logData.put("traceId", traceId);
            }

            if (context != null && context.length > 0) {
                Map<String, Object> contextMap = new HashMap<>();
                for (int i = 0; i < context.length; i += 2) {
                    if (i + 1 < context.length) {
                        contextMap.put(String.valueOf(context[i]), context[i + 1]);
                    }
                }
                logData.put("context", contextMap);
            }

            if (throwable != null) {
                Map<String, Object> errorInfo = new HashMap<>();
                errorInfo.put("type", throwable.getClass().getSimpleName());
                errorInfo.put("message", throwable.getMessage());
                logData.put("error", errorInfo);
            }

            String jsonLog = objectMapper.writeValueAsString(logData);

            switch (level) {
                case "INFO":
                    logger.info(jsonLog);
                    break;
                case "ERROR":
                    logger.error(jsonLog);
                    break;
                case "WARN":
                    logger.warn(jsonLog);
                    break;
                case "DEBUG":
                    logger.debug(jsonLog);
                    break;
                default:
                    logger.info(jsonLog);
            }

        } catch (Exception e) {
            logger.error("Failed to create structured log", e);
        }
    }
}
```

### HTTP ÂÆ¢Êà∑Á´ØÂ∑•ÂÖ∑Á±ª
```java
// util/HttpClient.java
package com.example.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.util.Map;

@Component
public class HttpClient {

    private static final Logger logger = LoggerFactory.getLogger(HttpClient.class);

    private final RestTemplate restTemplate;
    private final String baseUrl;
    private final int maxRetries;

    @Autowired
    public HttpClient(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.baseUrl = "";
        this.maxRetries = 3;
    }

    public <T> ResponseEntity<T> get(String path, Class<T> responseType, Map<String, String> headers) {
        return executeWithRetry("GET", path, null, responseType, headers);
    }

    public <T> ResponseEntity<T> post(String path, Object body, Class<T> responseType, Map<String, String> headers) {
        return executeWithRetry("POST", path, body, responseType, headers);
    }

    private <T> ResponseEntity<T> executeWithRetry(String method, String path, Object body,
                                                  Class<T> responseType, Map<String, String> headers) {
        String url = baseUrl + path;
        Exception lastException = null;

        for (int attempt = 0; attempt <= maxRetries; attempt++) {
            if (attempt > 0) {
                LogUtil.warn(logger, "Retrying HTTP request",
                    "attempt", attempt, "method", method, "url", url);
            }

            try {
                long startTime = System.currentTimeMillis();

                HttpHeaders httpHeaders = new HttpHeaders();
                httpHeaders.setContentType(MediaType.APPLICATION_JSON);

                if (headers != null) {
                    headers.forEach(httpHeaders::set);
                }

                HttpEntity<?> entity = new HttpEntity<>(body, httpHeaders);

                ResponseEntity<T> response;
                switch (method.toUpperCase()) {
                    case "GET":
                        response = restTemplate.exchange(url, HttpMethod.GET,
                            new HttpEntity<>(httpHeaders), responseType);
                        break;
                    case "POST":
                        response = restTemplate.exchange(url, HttpMethod.POST, entity, responseType);
                        break;
                    default:
                        throw new IllegalArgumentException("Unsupported HTTP method: " + method);
                }

                long duration = System.currentTimeMillis() - startTime;

                LogUtil.info(logger, "HTTP request completed",
                    "method", method,
                    "url", url,
                    "statusCode", response.getStatusCodeValue(),
                    "duration", duration + "ms"
                );

                return response;

            } catch (Exception e) {
                lastException = e;
                LogUtil.error(logger, "HTTP request failed", e,
                    "method", method,
                    "url", url,
                    "attempt", attempt
                );
            }
        }

        throw new RuntimeException("Request failed after " + maxRetries + " attempts", lastException);
    }
}
```

---

## üß™ Java ÊµãËØïËßÑËåÉ

### ÂçïÂÖÉÊµãËØïÁ§∫‰æã
```java
// test/service/UserServiceTest.java
package com.example.service;

import com.example.domain.User;
import com.example.dto.CreateUserRequest;
import com.example.dto.UserResponse;
import com.example.exception.DuplicateResourceException;
import com.example.repository.UserRepository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@DisplayName("User Service Tests")
class UserServiceTest {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserService userService;

    private User testUser;
    private CreateUserRequest createUserRequest;

    @BeforeEach
    void setUp() {
        testUser = new User("John Doe", "john@example.com");
        testUser.setId(1L);

        createUserRequest = new CreateUserRequest();
        createUserRequest.setName("John Doe");
        createUserRequest.setEmail("john@example.com");
    }

    @Test
    @DisplayName("Should create user successfully")
    void shouldCreateUserSuccessfully() {
        // Given
        when(userRepository.findByEmail(anyString())).thenReturn(Optional.empty());
        when(userRepository.save(any(User.class))).thenReturn(testUser);

        // When
        UserResponse result = userService.createUser(createUserRequest);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getId()).isEqualTo(1L);
        assertThat(result.getName()).isEqualTo("John Doe");
        assertThat(result.getEmail()).isEqualTo("john@example.com");

        verify(userRepository).findByEmail("john@example.com");
        verify(userRepository).save(any(User.class));
    }

    @Test
    @DisplayName("Should throw exception when user already exists")
    void shouldThrowExceptionWhenUserAlreadyExists() {
        // Given
        when(userRepository.findByEmail(anyString())).thenReturn(Optional.of(testUser));

        // When & Then
        assertThatThrownBy(() -> userService.createUser(createUserRequest))
                .isInstanceOf(DuplicateResourceException.class)
                .hasMessageContaining("User with email john@example.com already exists");

        verify(userRepository).findByEmail("john@example.com");
        verify(userRepository, never()).save(any(User.class));
    }
}
```

### ÈõÜÊàêÊµãËØïÁ§∫‰æã
```java
// test/controller/UserControllerIntegrationTest.java
package com.example.controller;

import com.example.domain.User;
import com.example.dto.CreateUserRequest;
import com.example.repository.UserRepository;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureTestMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureTestMvc
@ActiveProfiles("test")
@Transactional
@DisplayName("User Controller Integration Tests")
class UserControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private UserRepository userRepository;

    private User testUser;

    @BeforeEach
    void setUp() {
        userRepository.deleteAll();
        testUser = new User("John Doe", "john@example.com");
        testUser = userRepository.save(testUser);
    }

    @Test
    @DisplayName("Should create user successfully")
    void shouldCreateUserSuccessfully() throws Exception {
        CreateUserRequest request = new CreateUserRequest();
        request.setName("Jane Doe");
        request.setEmail("jane@example.com");

        mockMvc.perform(post("/api/v1/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.name").value("Jane Doe"))
                .andExpect(jsonPath("$.data.email").value("jane@example.com"))
                .andExpect(jsonPath("$.data.id").isNumber());
    }

    @Test
    @DisplayName("Should get user by id successfully")
    void shouldGetUserByIdSuccessfully() throws Exception {
        mockMvc.perform(get("/api/v1/users/{id}", testUser.getId()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.id").value(testUser.getId()))
                .andExpect(jsonPath("$.data.name").value("John Doe"))
                .andExpect(jsonPath("$.data.email").value("john@example.com"));
    }
}
```

                .andExpect(jsonPath("$.data.id").value(testUser.getId()))
                .andExpect(jsonPath("$.data.name").value("John Doe"))
                .andExpect(jsonPath("$.data.email").value("john@example.com"));
    }
}