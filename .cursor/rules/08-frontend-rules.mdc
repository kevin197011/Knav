---
alwaysApply: true
---
## 🖼️ 核心UI组件库

### 卡片组件
```typescript
// components/ui/Card.tsx
interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: 'default' | 'outlined' | 'elevated';
  padding?: 'none' | 'sm' | 'md' | 'lg';
  children: React.ReactNode;
}

export const Card: React.FC<CardProps> = ({
  variant = 'default',
  padding = 'md',
  className,
  children,
  ...props
}) => {
  return (
    <div
      className={cn(
        'rounded-lg',
        {
          // Variants
          'bg-white shadow-sm border border-gray-200': variant === 'default',
          'bg-white border-2 border-gray-300': variant === 'outlined',
          'bg-white shadow-lg': variant === 'elevated',

          // Padding
          'p-0': padding === 'none',
          'p-4': padding === 'sm',
          'p-6': padding === 'md',
          'p-8': padding === 'lg',
        },
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
};
```

### 输入框组件
```typescript
// components/ui/Input.tsx
interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helperText?: string;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
}

export const Input: React.FC<InputProps> = ({
  label,
  error,
  helperText,
  leftIcon,
  rightIcon,
  className,
  ...props
}) => {
  return (
    <div className="space-y-2">
      {label && (
        <label className="block text-sm font-medium text-gray-700">
          {label}
        </label>
      )}

      <div className="relative">
        {leftIcon && (
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <div className="text-gray-400">{leftIcon}</div>
          </div>
        )}

        <input
          className={cn(
            'block w-full rounded-lg border-gray-300 shadow-sm',
            'focus:border-primary-500 focus:ring-primary-500',
            'disabled:bg-gray-50 disabled:text-gray-500',
            {
              'pl-10': leftIcon,
              'pr-10': rightIcon,
              'border-red-300 focus:border-red-500 focus:ring-red-500': error,
            },
            className
          )}
          {...props}
        />

        {rightIcon && (
          <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
            <div className="text-gray-400">{rightIcon}</div>
          </div>
        )}
      </div>

      {error && (
        <p className="text-sm text-red-600">{error}</p>
      )}

      {helperText && !error && (
        <p className="text-sm text-gray-500">{helperText}</p>
      )}
    </div>
  );
};
```

### 模态框组件
```typescript
// components/ui/Modal.tsx
interface ModalContextType {
  isOpen: boolean;
  onClose: () => void;
}

const ModalContext = React.createContext<ModalContextType | undefined>(undefined);

const useModalContext = () => {
  const context = React.useContext(ModalContext);
  if (!context) {
    throw new Error('Modal components must be used within Modal');
  }
  return context;
};

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
}

const Modal: React.FC<ModalProps> & {
  Header: typeof ModalHeader;
  Body: typeof ModalBody;
  Footer: typeof ModalFooter;
} = ({ isOpen, onClose, children }) => {
  if (!isOpen) return null;

  return (
    <ModalContext.Provider value={{ isOpen, onClose }}>
      <div className="fixed inset-0 z-50 overflow-y-auto">
        <div className="flex min-h-screen items-center justify-center p-4">
          <div
            className="fixed inset-0 bg-black bg-opacity-50 transition-opacity"
            onClick={onClose}
          />
          <div className="relative w-full max-w-md transform overflow-hidden rounded-lg bg-white shadow-xl transition-all">
            {children}
          </div>
        </div>
      </div>
    </ModalContext.Provider>
  );
};

const ModalHeader: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { onClose } = useModalContext();

  return (
    <div className="flex items-center justify-between p-6 border-b border-gray-200">
      <h3 className="text-lg font-semibold text-gray-900">{children}</h3>
      <button
        onClick={onClose}
        className="p-1 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500"
      >
        <Icon name="times" />
      </button>
    </div>
  );
};

const ModalBody: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <div className="p-6">{children}</div>
);

const ModalFooter: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <div className="flex items-center justify-end space-x-3 p-6 border-t border-gray-200">
    {children}
  </div>
);

Modal.Header = ModalHeader;
Modal.Body = ModalBody;
Modal.Footer = ModalFooter;

export { Modal };
```

---

## 📱 响应式设计规范

### 断点和网格系统
```css
/* globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    @apply scroll-smooth;
  }

  body {
    @apply bg-gray-50 text-gray-900 antialiased;
  }
}

@layer components {
  .container-responsive {
    @apply container mx-auto px-4 sm:px-6 lg:px-8;
  }

  .grid-responsive {
    @apply grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4;
  }

  .card-responsive {
    @apply bg-white rounded-lg shadow-sm p-4 sm:p-6 lg:p-8;
  }
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}
```

### 布局组件
```typescript
// components/layout/Layout.tsx
interface LayoutProps {
  children: React.ReactNode;
  sidebar?: React.ReactNode;
  header?: React.ReactNode;
  footer?: React.ReactNode;
}

export const Layout: React.FC<LayoutProps> = ({
  children,
  sidebar,
  header,
  footer,
}) => {
  return (
    <div className="min-h-screen bg-gray-50">
      {header && (
        <header className="sticky top-0 z-40 bg-white shadow-sm">
          {header}
        </header>
      )}

      <div className="flex">
        {sidebar && (
          <aside className="hidden lg:flex lg:w-64 lg:flex-col lg:fixed lg:inset-y-0 lg:pt-16">
            <div className="flex-1 bg-white border-r border-gray-200 overflow-y-auto">
              {sidebar}
            </div>
          </aside>
        )}

        <main className={cn(
          'flex-1',
          sidebar && 'lg:pl-64'
        )}>
          <div className="container-responsive py-6">
            {children}
          </div>
        </main>
      </div>

      {footer && (
        <footer className={cn(
          'bg-white border-t border-gray-200',
          sidebar && 'lg:pl-64'
        )}>
          {footer}
        </footer>
      )}
    </div>
  );
};
```

---

## 🧪 测试规范

### 组件测试
```typescript
// __tests__/components/Button.test.tsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { Button } from '../components/ui/Button';

describe('Button Component', () => {
  test('renders with default props', () => {
    render(<Button>Click me</Button>);
    const button = screen.getByRole('button', { name: /click me/i });

    expect(button).toBeInTheDocument();
    expect(button).toHaveClass('bg-primary-600');
  });

  test('applies variant classes correctly', () => {
    render(<Button variant="secondary">Secondary</Button>);
    const button = screen.getByRole('button');

    expect(button).toHaveClass('bg-gray-200');
  });

  test('handles click events', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);

    fireEvent.click(screen.getByRole('button'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
```

---

## 📋 开发工具配置

### ESLint 配置
```javascript
// .eslintrc.js
module.exports = {
  extends: [
    'next/core-web-vitals',
    '@typescript-eslint/recommended',
    'plugin:tailwindcss/recommended',
  ],
  plugins: ['@typescript-eslint', 'tailwindcss'],
  rules: {
    'tailwindcss/classnames-order': 'warn',
    'tailwindcss/no-custom-classname': 'off',
    'tailwindcss/no-contradicting-classname': 'error',
    '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
    'prefer-const': 'error',
    'no-console': 'warn',
  },
  settings: {
    tailwindcss: {
      config: './tailwind.config.js',
    },
  },
};
```

### Prettier 配置
```javascript
// .prettierrc.js
module.exports = {
  semi: true,
  trailingComma: 'es5',
  singleQuote: true,
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  plugins: ['prettier-plugin-tailwindcss'],
  tailwindConfig: './tailwind.config.js',
};
```

---

## 📚 最佳实践总结

### 必须遵循的规则
1. **所有样式使用 Tailwind CSS**，禁止内联样式和自定义 CSS
2. **图标统一使用 Font Awesome**，保持图标库的一致性
3. **组件必须支持 TypeScript**，类型覆盖率 > 95%
4. **响应式设计必须 Mobile-First**
5. **所有交互元素必须支持键盘导航**
6. **组件必须包含 loading 和 error 状态**
7. **必须编写单元测试**

### 性能目标
- **First Contentful Paint (FCP)**: < 1.5s
- **Largest Contentful Paint (LCP)**: < 2.5s
- **First Input Delay (FID)**: < 100ms
- **Cumulative Layout Shift (CLS)**: < 0.1
- **Bundle Size**: 主包 < 200KB (gzipped)

### 代码质量标准
- **TypeScript 严格模式**: 启用所有严格检查
- **ESLint 规则**: 无 warning 或 error
- **测试覆盖率**: > 80%
- **无障碍评分**: WCAG 2.1 AA 级别
- **浏览器兼容性**: 支持现代浏览器的最近两个版本

## 9. 最小可见性原则（Principle of Least Visibility）
- 除非必要，不要暴露任何组件、方法或变量。
- 前端开发中，组件/模块应只导出明确需要被外部依赖的部分，其余保持私有（如文件作用域、闭包、私有 class 字段等）。
- 该原则体现信息隐藏和封装思想，有助于降低耦合、提升可维护性、防止误用。
- 相关原则：最小权限原则、单一职责原则、封装。

---

通过遵循这些规范，我们可以构建出高质量、高性能、易维护的现代前端应用。这些规范与 JavaScript/TypeScript 规范无缝集成，为全栈开发提供了完整的解决方案。


---

通过遵循这些规范，我们可以构建出高质量、高性能、易维护的现代前端应用。这些规范与 JavaScript/TypeScript 规范无缝集成，为全栈开发提供了完整的解决方案。
